• Special type of Variable
• Hold multiple values of the same data type
• Size is fixed
• Supports both primitives & non-primitives
• Every Element has index numbers

There are 2 ways to declare one-dimensional arrays:
•Specify the type, and then specify square brackets [ ] and finally array variable name.
•Specify the type, and then specify the array variable name which is followed by square brackets [ ].
Int[] scores;
String names[];
Instantiating arrays
To instantiate one dimensional array, use the keyword new, followed by type and then finally specify the size within square brackets [ ]
•Declare and instantiate in separate statements 
int[] scores;
scores = new int[4];// 4 is length
•Declare and instantiate in single statements. If we do not know the exact data:
int[] scores= new int[4];
•Like regular variables, Java also allows you to initialize an array’s elements when you create the array. If we know the exact data:
int[]mylist={1,2,3,4,5};
mylist[0]=1;---mylist[1]=2...


System.out.println(Arrays.toString(names));//shows list of arrays

System.out.println(days[number-1]);// shows the spesific name of the day

[nameOfArray.length-1];// will give last index number of array

System.out.println(months[i]);// will give for loop all the months

char [] ch= new char[26];// I assigned 26 characters to one dim. char array

for (char i = 'A', j=0; i <= 'Z' && j<letters.length; i++,j++) {
  letters[j]=i;
        }//I assigned two data to char i and j. they have same same data type that is why it is possible to use this way


ARRAYS UTILITY
Utility class of the array, provides the methods that can be used for the arrays

class name: Arrays
package: java.util
import java.util.Arrays;

default values:
	non-primiitives: null
	primitives:
		byte, short, int, long ===> 0
		float, double ===> 0.0
		boolean ==> false
    
Arrays.sort(array); sorts the array in ascending order
Arrays.toString(array); converts array to string, returns String
Arrays.deepToString(array);shows muldimensional arrays
Arrays.equals(array1, array2); checks if two arrays are equal, returns boolean
copyOf(array, newLength); copys the elements of the array, starting from first element to given number, returns new array
numbers=Arrays.copyOf(numbers,5);
copyOfRange(array, beginningIndex, endingIndex); copys the elements of the array, staring from beginning index till the ending index (ending index excluded), returns new array
char [] ch2= Arrays.copyOfRange(ch1, 2,6);-> 6 is not included
char [] ch= str.toCharArray();--> will give char array of a string

        System.out.println(Arrays.deepToString(arr3D));// whole 3d array
        System.out.println(Arrays.deepToString(arr3D[0]));// 0. 2d array 
        System.out.println(Arrays.toString(arr3D[0][0]));//spesific 1d array [1, 2, 3]
        System.out.println(arr3D[0][0][0]);// spesific element

 for (int [][]each2d:arr3D){
            for (int[]each1D:each2d){
                for (int element:each1D){
                    System.out.println(element);}}}
