• You write source code (*.java) , Java files are stored  “ .java" 
--> it will go Java Compiler 
--> compiler return it byte code (*.class).
--> Byte code will go JVM(Java Virtual Machine) to return it Native Code (Windows, Mac etc.)  
-->JRE (Java Runtime Environment)

Source code -> Java C Compiler   -> Byte Code (.class file)   -> JVM (Loader    -> Byte Code Verifier   -> Execution  -> Final Output

•	JVM= Java Virtual Machine is system library provides the resources.
•	JRE = Java Runtime Environment is development environment.
•	JDK = Java Development Kit is responsible running java codes.
•	Javac = Java Compiler translates.

Integrated development environment (IDE) is a software application that provides Comprehensive facilities to computer programmers for software development with just one click. 
No need Javac, JVM. Because IntelliJ , Visual Studio, Net Beans etc. are designed for Java.

HOW TO MAKE A PROGRAM VISIBLE?
• Anyone who installed JRE can use the program.
• Menu->File-> Project Structure->Artifacts-> + ->Jar ->for modules for independicies -> module -> main class-> ok
Then;
• Menu-> Build-> Select Build Artifact-> Choose Action
Then;
• You will see out project at the right side of Inttellij->You have jar file-> Right click Open in terminal->To run program enter java-jar-HelloWorld.jar->enter


WHAT IS WHAT FIRST COUNTED WITH INTELLIJ?
• Package is container of related classes.
• Class is contanier of  methods and instances.
• Primitives store data.
• Non-primitives store complex objects by their references(address).They dont store actual objects. 
• Objects are instances of class. every object you created from the same class are independent in the memory.
• if you assing two different objects to each other, any difference will affect other object but not at the variables. unused variables will go garbage collection.
• System.out.println();--> System is class. Out is field(f).println is method.
• String message = new String(""Hello World"");/String message="""";-->Sting is a class. Package is automatically imported.
